name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  # First job: Build and test API service
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Aggressive cleanup before build
      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift

          # Clean Docker system
          docker system prune -af

          # Clean up GitHub Actions Runner logs
          sudo rm -rf "/home/runner/runners/2.322.0/_diag"
          sudo rm -rf "/home/runner/_tool"
          sudo rm -rf /home/runner/work/_temp/*

          echo "Disk space after cleanup:"
          df -h

      # Set up Docker Buildx with disk quota
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
            --debug

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push API image
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/imageupscaler/api:latest
            ghcr.io/${{ github.repository_owner }}/imageupscaler/api:${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/api-image.tar
          platforms: linux/amd64
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      # Run tests
      - name: Run tests
        run: |
          # Load the image we just built
          docker load < /tmp/api-image.tar

          # Run tests in Docker
          docker compose run --rm api pytest

          # Cleanup
          docker compose down
          docker system prune -af

  # Second job: Build ESRGAN service
  build-esrgan:
    needs: build-api  # Run after API build to avoid parallel disk usage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Aggressive cleanup before build
      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift

          # Clean Docker system
          docker system prune -af

          # Clean up GitHub Actions Runner logs
          sudo rm -rf "/home/runner/runners/2.322.0/_diag"
          sudo rm -rf "/home/runner/_tool"
          sudo rm -rf /home/runner/work/_temp/*

          echo "Disk space after cleanup:"
          df -h

      # Set up Docker Buildx with disk quota
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
            --debug

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create Docker volume and download model
      - name: Download ESRGAN model
        run: |
          docker volume create esrgan_models
          docker run --rm -v esrgan_models:/models --user root curlimages/curl:latest sh -c '
            mkdir -p /models &&
            if [ ! -f "/models/RealESRGAN_x4plus.pth" ]; then
              echo "Downloading RealESRGAN model..." &&
              curl -L https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -o /models/RealESRGAN_x4plus.pth &&
              chmod 644 /models/RealESRGAN_x4plus.pth;
            else
              echo "Model already exists";
            fi'

      # Build and push ESRGAN image
      - name: Build and push ESRGAN image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.esrgan
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/imageupscaler/esrgan:latest
            ghcr.io/${{ github.repository_owner }}/imageupscaler/esrgan:${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/esrgan-image.tar
          platforms: linux/amd64
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      # Final cleanup
      - name: Post-build cleanup
        if: always()
        run: |
          docker system prune -af
          sudo rm -rf /tmp/*
          echo "Final disk space:"
          df -h
