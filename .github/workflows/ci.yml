# Simple CI/CD pipeline for building and testing our Docker-based image upscaler
# Focuses on end-to-end testing and efficient resource usage

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  # First job: Build and test API service
  # We build and test API first since it's smaller and faster
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Free up disk space before building
      # This is crucial since the ESRGAN model and its dependencies are quite large
      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift

          # Remove development tools and packages
          sudo apt-get remove -y '^ghc-*' '^dotnet-*' '^llvm-*' '^php*' '^mongodb-*' '^mysql-*' '^postgresql-*' '^cmake-*' '^ninja-*' '^oracle-*' '^powershell*' azure-cli google-cloud-sdk google-chrome-stable firefox
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

          # Remove caches
          sudo rm -rf /usr/local/lib/android/sdk/platforms
          sudo rm -rf /usr/local/lib/android/sdk/build-tools
          sudo rm -rf /usr/local/lib/android/sdk/platform-tools
          sudo rm -rf /usr/local/lib/android/sdk/tools
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/.ghcup

          # Remove NPM and other caches
          npm cache clean --force
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /opt/microsoft

          # Clean Docker system
          docker system prune -af
          docker builder prune -f
          docker volume prune -f

          # Remove all containers and images
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true
          docker rmi $(docker images -q) || true

          # Clean up GitHub Actions Runner logs and temp files
          sudo rm -rf "/home/runner/runners/*/diag"
          sudo rm -rf "/home/runner/_tool"
          sudo rm -rf /home/runner/work/_temp/*
          sudo rm -rf /tmp/*

          # Remove large log files
          sudo find /var/log -type f -delete

          echo "Disk space after cleanup:"
          df -h

      # Set up Docker Buildx with optimizations for our use case
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
            --debug

      # Login to GitHub Container Registry for pushing images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build API service and save to tar for testing
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/imageupscaler/api:latest
            ghcr.io/${{ github.repository_owner }}/imageupscaler/api:${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/api-image.tar
          platforms: linux/amd64
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      # Run end-to-end functional tests
      - name: Run tests
        run: |
          # Load the image we just built
          docker load < /tmp/api-image.tar

          # Run tests in Docker
          docker compose run --rm api pytest

          # Cleanup
          docker compose down
          docker system prune -af

  # Second job: Build ESRGAN service
  # This runs after API to avoid parallel disk usage since it's a larger build
  build-esrgan:
    needs: build-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Same aggressive cleanup as API job
      - name: Free disk space
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift

          # Remove development tools and packages
          sudo apt-get remove -y '^ghc-*' '^dotnet-*' '^llvm-*' '^php*' '^mongodb-*' '^mysql-*' '^postgresql-*' '^cmake-*' '^ninja-*' '^oracle-*' '^powershell*' azure-cli google-cloud-sdk google-chrome-stable firefox
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

          # Remove caches
          sudo rm -rf /usr/local/lib/android/sdk/platforms
          sudo rm -rf /usr/local/lib/android/sdk/build-tools
          sudo rm -rf /usr/local/lib/android/sdk/platform-tools
          sudo rm -rf /usr/local/lib/android/sdk/tools
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/.ghcup

          # Remove NPM and other caches
          npm cache clean --force
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /opt/microsoft

          # Clean Docker system
          docker system prune -af
          docker builder prune -f
          docker volume prune -f

          # Remove all containers and images
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true
          docker rmi $(docker images -q) || true

          # Clean up GitHub Actions Runner logs and temp files
          sudo rm -rf "/home/runner/runners/*/diag"
          sudo rm -rf "/home/runner/_tool"
          sudo rm -rf /home/runner/work/_temp/*
          sudo rm -rf /tmp/*

          # Remove large log files
          sudo find /var/log -type f -delete

          echo "Disk space after cleanup:"
          df -h

      # Set up Docker Buildx with same optimizations
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
            --debug

      # Only login if we're going to push (main branch)
      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Download ESRGAN model into a volume
      - name: Download ESRGAN model
        run: |
          docker volume create esrgan_models
          docker run --rm -v esrgan_models:/models --user root curlimages/curl:latest sh -c '
            mkdir -p /models &&
            if [ ! -f "/models/RealESRGAN_x4plus.pth" ]; then
              echo "Downloading RealESRGAN model..." &&
              curl -L https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -o /models/RealESRGAN_x4plus.pth &&
              chmod 644 /models/RealESRGAN_x4plus.pth;
            else
              echo "Model already exists";
            fi'

      # Build ESRGAN service
      - name: Build and push ESRGAN image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.esrgan
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/imageupscaler/esrgan:latest
            ghcr.io/${{ github.repository_owner }}/imageupscaler/esrgan:${{ github.sha }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          outputs: type=docker,dest=/tmp/esrgan-image.tar
          platforms: linux/amd64
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760

      # Always clean up, even if build fails
      - name: Post-build cleanup
        if: always()
        run: |
          docker system prune -af
          sudo rm -rf /tmp/*
          echo "Final disk space:"
          df -h
