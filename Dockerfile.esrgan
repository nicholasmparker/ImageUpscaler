# Stage 1: Build dependencies
FROM python:3.9-slim AS builder

WORKDIR /app

# Copy only requirements first to leverage Docker cache
COPY requirements/prod.txt requirements.txt

# Install build dependencies and Python packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        python3-dev \
        git \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir -r requirements.txt \
    && pip wheel --no-cache-dir --wheel-dir /app/wheels -r requirements.txt \
    && rm -rf /root/.cache/pip/*

# Stage 2: Runtime
FROM python:3.9-slim

WORKDIR /app

# Create model directory
RUN mkdir -p /app/models

# Install runtime dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libgl1-mesa-glx \
        libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Copy wheels from previous stage and install
COPY --from=builder /app/wheels /app/wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --no-cache-dir /app/wheels/* \
    && rm -rf /app/wheels \
    && rm -rf /root/.cache/pip/*

# Copy application code
COPY esrgan_service esrgan_service/

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MODEL_PATH=/app/models/RealESRGAN_x4plus.pth \
    USE_GPU=false

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Create volume mount point
VOLUME /app/models

# Run the application
CMD ["uvicorn", "esrgan_service.main:app", "--host", "0.0.0.0", "--port", "8001"]
